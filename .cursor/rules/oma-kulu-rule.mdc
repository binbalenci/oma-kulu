---
alwaysApply: true
---

# Oma Kulu - Cursor Development Rules

## General Guidelines

### Communication

- **Always start responses with "YO ALPHA!"** when beginning work on a task
- Be direct and action-oriented in explanations
- Show what you're doing, not just what you plan to do

### Code Quality

- **Always ensure linter passes after changing code**
- Run `read_lints` on modified files before completing a task
- Fix all linter errors and warnings immediately
- Use proper TypeScript types - no `any` types unless absolutely necessary

### Project Knowledge

- **Read these files first** before making architectural decisions:
  - `docs/APP_SPEC.md` - Complete app specification and user flows
  - `docs/ROADMAP.md` - Current development phase and feature status
- These documents are the single source of truth for requirements

---

## Components & Technical Patterns

### Global Snackbar (Toast Notifications)

- **Always use the global Snackbar** for user feedback, never create local toast/notification state
- Import: `import { useSnackbar } from "@/components/snackbar-provider";`
- Usage: `const { showSnackbar } = useSnackbar();`
- Call: `showSnackbar("Your message here");` or `showSnackbar("Message", 5000);` for custom duration

**When to use Snackbar:**

- Success confirmations: "Budget saved successfully!"
- Error messages: "No data found for previous month"
- Info notifications: "Copied 5 items from January 2025"
- Warnings: "Cannot delete: item is in use"

**Example:**

```typescript
const handleSave = () => {
  // ... save logic
  showSnackbar("Changes saved successfully!");
};
```

### Data Storage

- Use existing storage functions in `lib/storage.ts`
- Always save data after state updates using `useEffect`
- Load data on component mount with proper error handling

**Pattern:**

```typescript
React.useEffect(() => {
  saveTransactions(transactions);
}, [transactions]);
```

### Navigation

- Use `expo-router` for navigation
- Import: `import { useRouter } from "expo-router";`
- Navigate: `router.push("/(tabs)/categories");`
- Tab structure: Budget (default), Transactions, Categories

### UI Components

- Use React Native Paper components consistently
- Import theme: `import { useTheme } from "react-native-paper";`
- Access colors: `theme.colors.primary`, `theme.colors.error`, etc.
- Use proper spacing: multiples of 4 (4, 8, 12, 16, 24, 32)

### State Management

- Use React hooks for local state
- Keep state as close to where it's used as possible
- Use `React.useCallback` for functions passed as props
- Use `React.useMemo` for expensive computations

---

## App-Specific Patterns

### Budget View

- Month selector format: `format(date, "MMMM yyyy")`
- Month key format: `format(date, "yyyy-MM")`
- Always filter budgets by current month: `budgets.filter((b) => b.month === curMonth)`
- Calculate "Money to assign": `expectedIncome - expectedExpenses - totalAllocated`
- Calculate "Actual in bank": `startingBalance + sum(all transactions)`

### Transactions

- Date format: `yyyy-MM-dd` (ISO format)
- Status: `"upcoming"` or `"paid"`
- Amount convention: positive for income, negative for expenses
- Always include `created_at` timestamp

### Templates (Recurring Items)

- Type: `"income"` or `"expense"`
- Store typical amounts as positive numbers
- Convert to negative when creating expense transactions
- Filter by `enabled !== false` when displaying

### Progress Bars & Color Coding

```typescript
const getProgressColor = (ratio: number) => {
  if (ratio === 0) return theme.colors.surfaceDisabled;
  if (ratio < 0.75) return "#4caf50"; // green
  if (ratio < 0.96) return "#ff9800"; // orange
  return "#f44336"; // red
};
```

---

## File Organization

```
app/
  â”œâ”€â”€ (tabs)/           # Tab screens (budgets, transactions, categories)
  â”œâ”€â”€ _layout.tsx       # Root layout with providers
  â””â”€â”€ modal.tsx         # Modal screens

components/
  â”œâ”€â”€ snackbar-provider.tsx  # Global snackbar context
  â”œâ”€â”€ passcode-gate.tsx      # Authentication
  â””â”€â”€ ui/                    # Reusable UI components

lib/
  â”œâ”€â”€ storage.ts        # AsyncStorage helpers
  â”œâ”€â”€ types.ts          # TypeScript interfaces
  â””â”€â”€ supabase.ts       # Database client

docs/
  â”œâ”€â”€ APP_SPEC.md       # Feature specifications
  â”œâ”€â”€ ROADMAP.md        # Development phases
  â””â”€â”€ *.md              # Additional documentation
```

---

## Common Tasks

### Adding a New Feature

1. Check `docs/ROADMAP.md` to confirm it's in the current phase
2. Review `docs/APP_SPEC.md` for requirements
3. Implement following existing patterns
4. Use global Snackbar for user feedback
5. Run linter and fix all errors
6. Update documentation if needed

### Adding a New Type

1. Add interface to `lib/types.ts`
2. Create storage helpers in `lib/storage.ts`
3. Follow naming convention: `load*` and `save*` functions
4. Use AsyncStorage keys: `storage_*_v1`

### Creating a New Screen

1. Add file to `app/(tabs)/` for tab screens
2. Register in `app/(tabs)/_layout.tsx` if it's a tab
3. Use `useTheme()` for consistent styling
4. Import and use `useSnackbar()` for notifications
5. Follow existing screen structure (state, effects, render)

---

## Testing Checklist

Before completing any task:

- [ ] Linter passes with no errors
- [ ] All TypeScript types are properly defined
- [ ] User feedback is provided via Snackbar where appropriate
- [ ] Data persists correctly across app restarts
- [ ] Navigation works as expected
- [ ] UI is consistent with existing screens
- [ ] Code follows existing patterns

---

## Philosophy

**Planning-First Approach**

- Budget view is the primary workspace
- Users should see financial status at a glance
- Every interaction should feel intuitive
- Data flows seamlessly between views

**Code Quality**

- Write clean, readable code
- Follow existing patterns consistently
- Don't over-engineer solutions
- Prioritize user experience

---

## Quick Reference

**Show a notification:**

```typescript
showSnackbar("Message here");
```

**Navigate to another screen:**

```typescript
router.push("/(tabs)/categories");
```

**Format a date:**

```typescript
format(date, "MMMM yyyy"); // "January 2025"
format(date, "yyyy-MM-dd"); // "2025-01-15"
```

**Access theme colors:**

```typescript
theme.colors.primary;
theme.colors.error;
theme.colors.secondary;
```

---

**Remember: When in doubt, check the existing code for patterns, and always start with "YO ALPHA!" ðŸš€**
